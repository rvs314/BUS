@article{TypeAndExample,
author = {Osera, Peter-Michael and Zdancewic, Steve},
title = {Type-and-Example-Directed Program Synthesis},
year = {2015},
issue_date = {June 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {50},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/2813885.2738007},
doi = {10.1145/2813885.2738007},
abstract = {This paper presents an algorithm for synthesizing recursive functions that process algebraic datatypes. It is founded on proof-theoretic techniques that exploit both type information and input–output examples to prune the search space. The algorithm uses refinement trees, a data structure that succinctly represents constraints on the shape of generated code. We evaluate the algorithm by using a prototype implementation to synthesize more than 40 benchmarks and several non-trivial larger examples. Our results demonstrate that the approach meets or outperforms the state-of-the-art for this domain, in terms of synthesis time or attainable size of the generated programs.},
journal = {SIGPLAN Not.},
month = {jun},
pages = {619–630},
numpages = {12},
keywords = {Type Theory, Proof Search, Program Syn- thesis, Functional Programming}
}
